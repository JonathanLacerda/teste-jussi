@import 'node_modules/flexbox-grid-mixins/sass/flexbox-grid-mixins';

$default-grid-columns: 12;
$default-grid-gutter: 2%;

body{
	font-family: 'Barlow', sans-serif;
}

.grid {
	@include grid($gutter: $default-grid-gutter);

	@for $i from 1 through $default-grid-columns {
		> .grid__col-#{$i} {
			@include grid-col($col: $i, $grid-columns: $default-grid-columns, $gutter: $default-grid-gutter);
		}
	}
}

@mixin min($bp, $max: "null", $device: "screen") {
	@if $max == "null" {
	  @media only #{$device} and (min-width: #{$bp}) {
		@content;
	  }
	} @else {
	  @media only #{$device} and (min-width: #{$bp}) and (max-width: #{$max}) {
		@content;
	  }
	}
  }

  @function bp($bp) {
	@return map-get($breakpoints, $bp);
  }

  $breakpoints: (
	na: 0px,
	// For BS grid
	  xs: 320px,
	// Smartphone
	  sm: 600px,
	// Tablets
	  md: 900px,
	// Tablets Landscape and small desktops
	  lg: 1200px,
	// Desktops
	  xl: 1800px,
	// Large Desktop
  );

  @function container($container-size, $true-val: false) {
	@return map-get($container-sizes, $container-size);
  }

  $container-sizes: (
	sm: map-get($breakpoints, sm) - 30px,
	md: map-get($breakpoints, md) - 40px,
	lg: map-get($breakpoints, lg) - 208px,
	xl: map-get($breakpoints, xl) - 776px
  );

  .container {
	padding-right: 1rem;
	padding-left: 1rem;

	&:not(.is-fluid) {
	  margin: 0 auto;

	  @each $bp, $container-size in $container-sizes {
		@include min(#{bp(#{$bp})}) {
		  width: 100%;
		  max-width: container(#{$bp});
		}
	  }
	}
  }

  @each $bp, $container-size in $container-sizes {
	.container-#{$bp} {
	  margin: 0 auto;
	  padding-right: 1rem;
	  padding-left: 1rem;
	  width: 100%;

	  $i: index($container-sizes, $bp $container-size);

	  @for $j from $i through length($container-sizes) {
		@include min(#{bp(nth(nth($container-sizes, $j), 1))}) {
		  max-width: container(#{nth(nth($container-sizes, $j), 1)});
		}
	  }
	}
  }